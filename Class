# Function to compute (a + b)^2 = a^2 + b^2 + 2ab
def compute_formula(a, b):
    return a**2 + b**2 + 2 * a * b

compute_lambda = lambda a, b: a**2 + b**2 + 2 * a * b

# Recursive function to compute factorial
def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# List operations
a = [1, 3, 5, 7, 9]
a[3], a[2] = 50, 49
a.append(100)
a.insert(2, 200)
a.pop()
del a[1]
a += [2, 4, 6]
c = a.copy()
b = sorted([2, 4, 6])
print(max(a))

# Tuple operations
a = (1, 3, 5, 7, 4)
a_list = list(a)
a_list.insert(2, 400)
a_modified = tuple(a_list)

# Set operations
a = {1, 3, 5, 8, 7}
b = {0, 1, 5}
a.update([2, 3, 4])

# Dictionary operations
employee = {
    "name": "A",
    "age": 40,
    "type": {"developer": ["ios", "android"]},
    "permanent": True,
    "salary": 30000
}
employee["permanent"] = False
employee["gender"] = "male"
employee.pop("age")

# String operations
a, b, c = "hello", "world", "python"
d = a + b + c

# Classes and inheritance
class Product:
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def display_detail(self):
        print(f"Name: {self.name}, Price: {self.price}")

class ElectronicProduct(Product):
    def __init__(self, name, price, warranty):
        super().__init__(name, price)
        self.warranty = warranty

    def display_detail(self):
        super().display_detail()
        print(f"Warranty: {self.warranty}")

class Shape:
    def __init__(self, name):
        self.name = name

class Rectangle(Shape):
    def __init__(self, name, length, width):
        super().__init__(name)
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

# Encapsulation example
class Vehicle:
    def __init__(self, color):
        self.color = color

class Taxi(Vehicle):
    def __init__(self, color, model, capacity, variant):
        super().__init__(color)
        self.__model, self.__capacity, self.__variant = model, capacity, variant

# Polymorphism example
class Department:
    def __init__(self, name):
        self.name = name

    def profile(self):
        return f"Department: {self.name}"

# Exception handling
class InvalidVoterException(Exception):
    pass

def check_voter_age(age):
    if age < 18:
        raise InvalidVoterException("Age must be 18 or older.")

# Numpy operations
import numpy as np
score = np.array([85, 90, 78, 92, 88], dtype=float)
a_score = score + 5
